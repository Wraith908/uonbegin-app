{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jn908\\\\UONBegin\\\\uonbegin-app\\\\src\\\\components\\\\subcomponents\\\\search.tsx\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\n/*This section was completed by Ronit Ronit*/\n// Imagine you have a list of languages that you'd like to autosuggest.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languages = [{\n  name: 'Hi'\n}, {\n  name: 'Hello'\n}, {\n  name: 'I need help'\n}, {\n  name: 'Where can I find a map of the University for guiding myself from current location to my destination?'\n}, {\n  name: 'How do I enrol in a course and register for class activities?'\n}, {\n  name: 'How can I check majors and elective courses?'\n}, {\n  name: 'How can I consult with my program advisor? how to contact them?'\n}, {\n  name: 'I lost my student card? How can I get new card?'\n}, {\n  name: 'Where is the library?'\n}, {\n  name: 'Is there any university doctor available for consulting my health?'\n}, {\n  name: 'I cannot afford my university fees? Is there any scholarship or university help available?'\n}, {\n  name: ' How do I apply for scholarships?'\n}, {\n  name: 'How do I apply for an Opal Concession card and Transport Entitlement Card?'\n}, {\n  name: 'What support services does the University offer for students?'\n}, {\n  name: 'My classes finish when it is dark, are there any extra safety precautions I can take when heading home?'\n}, {\n  name: 'How to arrange security shuttle pickup? '\n}, {\n  name: 'How do I find out what events are happening on campus?'\n}, {\n  name: 'How do I apply to waive my student visa application fee due to COVID-19?'\n}, {\n  name: 'University room'\n}, {\n  name: 'map'\n}, {\n  name: 'location'\n}, {\n  name: 'guide'\n}, {\n  name: 'enrol'\n}, {\n  name: 'enrolment'\n}, {\n  name: 'timetable'\n}, {\n  name: 'register'\n}, {\n  name: 'classes'\n}, {\n  name: 'major courses'\n}, {\n  name: 'elective courses'\n}, {\n  name: 'find major and elective courses'\n}, {\n  name: 'program advisor'\n}, {\n  name: 'program convenor'\n}, {\n  name: 'contact'\n}, {\n  name: 'meeting'\n}, {\n  name: 'lost'\n}, {\n  name: 'contact'\n}, {\n  name: 'card'\n}, {\n  name: 'new card'\n}, {\n  name: 'new'\n}, {\n  name: 'library'\n}, {\n  name: 'doctor'\n}, {\n  name: 'consultant'\n}, {\n  name: 'hospital'\n}, {\n  name: 'health'\n}, {\n  name: 'fees'\n}, {\n  name: 'scholarship'\n}, {\n  name: 'hardship'\n}, {\n  name: 'apply'\n}, {\n  name: 'opal card'\n}, {\n  name: 'concession card'\n}, {\n  name: 'transport entitlement card'\n}, {\n  name: 'how'\n}, {\n  name: 'support'\n}, {\n  name: 'university services'\n}, {\n  name: 'security'\n}, {\n  name: 'safety'\n}, {\n  name: 'how security'\n}, {\n  name: 'shuttle'\n}, {\n  name: 'pickup'\n}, {\n  name: 'event'\n}, {\n  name: 'campus'\n}, {\n  name: 'function'\n}, {\n  name: 'visa'\n}, {\n  name: 'apply'\n}, {\n  name: 'covid19'\n}, {\n  name: 'student visa'\n}]; // Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n// Use your imagination to render suggestions.\n\n\nclass Example extends React.Component {\n  constructor(msg) {\n    super(msg); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: suggestion.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 5\n    }, this);\n\n    this.getSuggestionValue = suggestion => suggestion.name;\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n      this.props.func(event, {\n        newValue\n      }); // if(newValue != undefined){\n      //     this.props.func2(newValue);\n      // }\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Type a message, suggestion will appear accrodingly',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      renderSuggestion: this.renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Example;","map":{"version":3,"sources":["C:/Users/jn908/UONBegin/uonbegin-app/src/components/subcomponents/search.tsx"],"names":["React","Autosuggest","languages","name","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","Example","Component","constructor","msg","renderSuggestion","suggestion","getSuggestionValue","onChange","event","newValue","setState","props","func","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\n/*This section was completed by Ronit Ronit*/\r\n\r\n// Imagine you have a list of languages that you'd like to autosuggest.\r\nconst languages = [\r\n  {\r\n    name: 'Hi'\r\n  },\r\n  {\r\n    name: 'Hello'\r\n  },\r\n  {\r\n    name: 'I need help'\r\n  },\r\n  {\r\n    name: 'Where can I find a map of the University for guiding myself from current location to my destination?'\r\n  },\r\n  {\r\n    name: 'How do I enrol in a course and register for class activities?'\r\n  },\r\n  {\r\n    name: 'How can I check majors and elective courses?'\r\n  },\r\n  {\r\n    name: 'How can I consult with my program advisor? how to contact them?'\r\n  },\r\n  {\r\n   name: 'I lost my student card? How can I get new card?'\r\n  },\r\n  {\r\n    name:'Where is the library?'\r\n  },\r\n  {\r\n    name:'Is there any university doctor available for consulting my health?'\r\n  },\r\n  {\r\n    name: 'I cannot afford my university fees? Is there any scholarship or university help available?'\r\n  },\r\n  {\r\n    name: ' How do I apply for scholarships?'\r\n  },\r\n  {\r\n    name: 'How do I apply for an Opal Concession card and Transport Entitlement Card?'\r\n  },\r\n  {\r\n    name: 'What support services does the University offer for students?'\r\n  },\r\n  {\r\n    name: 'My classes finish when it is dark, are there any extra safety precautions I can take when heading home?'\r\n  },\r\n  {\r\n    name: 'How to arrange security shuttle pickup? '\r\n  },\r\n  {\r\n    name: 'How do I find out what events are happening on campus?'\r\n  },\r\n  {\r\n    name: 'How do I apply to waive my student visa application fee due to COVID-19?'\r\n  },\r\n  {\r\n    name: 'University room'\r\n  },\r\n  {\r\n    name: 'map'\r\n  },\r\n  {\r\n    name: 'location'\r\n  },\r\n  {\r\n    name: 'guide'\r\n  },\r\n  {\r\n    name: 'enrol'\r\n  },\r\n  {\r\n    name: 'enrolment'\r\n  },\r\n  {\r\n    name: 'timetable'\r\n  },\r\n  {\r\n    name: 'register'\r\n  },\r\n  {\r\n    name: 'classes'\r\n  },\r\n  {\r\n    name: 'major courses'\r\n  },\r\n  {\r\n    name: 'elective courses'\r\n  },\r\n  {\r\n    name: 'find major and elective courses'\r\n  },\r\n  {\r\n    name: 'program advisor'\r\n  },\r\n  {\r\n    name: 'program convenor'\r\n  },\r\n  {\r\n    name: 'contact'\r\n  },\r\n  {\r\n    name: 'meeting'\r\n  },\r\n  {\r\n    name: 'lost'\r\n  },\r\n  {\r\n    name: 'contact'\r\n  },\r\n  {\r\n    name: 'card'\r\n  },\r\n  {\r\n    name: 'new card'\r\n  },\r\n  {\r\n    name: 'new'\r\n  },\r\n  {\r\n    name: 'library'\r\n  }\r\n  ,\r\n  {\r\n    name: 'doctor'\r\n  }\r\n  ,\r\n  {\r\n    name: 'consultant'\r\n  }\r\n  ,\r\n  {\r\n    name: 'hospital'\r\n  }\r\n  ,\r\n  {\r\n    name: 'health'\r\n  },\r\n  {\r\n    name: 'fees'\r\n  },\r\n  {\r\n    name: 'scholarship'\r\n  },\r\n  {\r\n    name: 'hardship'\r\n  },\r\n  {\r\n    name: 'apply'\r\n  },\r\n  {\r\n    name: 'opal card'\r\n  },\r\n  {\r\n    name: 'concession card'\r\n  },\r\n  {\r\n    name: 'transport entitlement card'\r\n  },\r\n  {\r\n    name: 'how'\r\n  },\r\n  {\r\n    name: 'support'\r\n  },\r\n  {\r\n    name: 'university services'\r\n  },\r\n  {\r\n    name: 'security'\r\n  },\r\n  {\r\n    name: 'safety'\r\n  },\r\n  {\r\n    name: 'how security'\r\n  },\r\n  {\r\n    name: 'shuttle'\r\n  },\r\n  {\r\n    name: 'pickup'\r\n  },\r\n  {\r\n    name: 'event'\r\n  },\r\n  {\r\n    name: 'campus'\r\n  },\r\n  {\r\n    name: 'function'\r\n  },\r\n  {\r\n    name: 'visa'\r\n  },\r\n  {\r\n    name: 'apply'\r\n  },\r\n  {\r\n    name: 'covid19'\r\n  },\r\n  {\r\n    name: 'student visa'\r\n  }\r\n\r\n];\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = value => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  return inputLength === 0 ? [] : languages.filter(lang =>\r\n    lang.name.toLowerCase().slice(0, inputLength) === inputValue\r\n  );\r\n};\r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\n\r\n\r\n// Use your imagination to render suggestions.\r\n\r\n\r\nclass Example extends React.Component {\r\n  constructor(msg: String) {\r\n    super(msg);\r\n\r\n\r\n    // Autosuggest is a controlled component.\r\n    // This means that you need to provide an input value\r\n    // and an onChange handler that updates this value (see below).\r\n    // Suggestions also need to be provided to the Autosuggest,\r\n    // and they are initially empty because the Autosuggest is closed.\r\n    this.state = {\r\n      value: '',\r\n      suggestions: []\r\n    };\r\n  }\r\n  renderSuggestion = suggestion => (\r\n    <div >\r\n      {suggestion.name}\r\n    </div>\r\n\r\n  );\r\n   getSuggestionValue = suggestion => suggestion.name;\r\n  onChange  = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue,\r\n\r\n    });\r\n    this.props.func(event, { newValue });\r\n    // if(newValue != undefined){\r\n    //     this.props.func2(newValue);\r\n    // }\r\n\r\n  };\r\n\r\n\r\n\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: getSuggestions(value)\r\n    });\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n\r\n    // Autosuggest will pass through all these props to the input.\r\n    const inputProps = {\r\n      placeholder: 'Type a message, suggestion will appear accrodingly',\r\n      value,\r\n      onChange: this.onChange,\r\n\r\n    };\r\n\r\n    // Finally, render it!\r\n    return (\r\n\r\n      <Autosuggest\r\n\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={this.getSuggestionValue}\r\n        renderSuggestion={this.renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;\r\n"]},"metadata":{},"sourceType":"module"}